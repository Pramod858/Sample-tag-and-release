name: Deploy to EC2 using SSM (3)

on:
  workflow_dispatch:
    inputs:
      instanceTag:
        description: 'Tag of the EC2 instance to run the command on'
        required: true
        default: 'MyInstance'
      ssmCommand:
        description: 'Multi-line commands to be executed on the EC2 instance'
        required: true
        default: |
          echo "Default Command"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Send command with SSM
        id: run-ssm-command
        run: |
          instance_ids=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ github.event.inputs.instanceTag }}" --query "Reservations[*].Instances[*].InstanceId" --output text)

          if [ -z "$instance_ids" ]; then
            echo "No instances found with tag: ${{ github.event.inputs.instanceTag }}"
            exit 1
          fi

          # Create the commands script
          echo "${{ github.event.inputs.ssmCommand }}" > /tmp/ssm_command.sh
          chmod +x /tmp/ssm_command.sh
          cat /tmp/ssm_command.sh

          # Run the commands on the EC2 instance
          command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$instance_ids" \
            --parameters commands=["/bin/bash /tmp/ssm_command.sh 2>&1 | tee /tmp/command.log"] \
            --timeout-seconds 3600 \
            --comment "Executing provided commands in script" \
            --query "Command.CommandId" \
            --output text)

          echo "Command ID: $command_id" | tee /tmp/command-id.txt

      - name: Check Command Status
        run: |
          command_id=$(cat /tmp/command-id.txt)
          
          status="InProgress"
          while [[ "$status" == "InProgress" || "$status" == "Pending" ]]; do
            sleep 10
            result=$(aws ssm list-command-invocations \
              --command-id "$command_id" \
              --details \
              --query "CommandInvocations[*].{Instance:InstanceId,Status:StatusDetails,Output:StandardOutputContent,ErrorOutput:StandardErrorContent}" \
              --output json)
            
            status=$(echo $result | jq -r '.[0].Status')
            output=$(echo $result | jq -r '.[0].Output')
            error_output=$(echo $result | jq -r '.[0].ErrorOutput')

            echo "Status: $status"
            
            if [[ "$status" == "Success" ]]; then
              echo "Output: $output"
            fi

            if [[ "$status" == "Failed" ]]; then
              echo "Error Output: $error_output"
            fi
          done

          echo "Final Status: $status"
          echo "Final Output: $output"
          echo "Final Error Output: $error_output"

          if [[ "$status" != "Success" ]]; then
            echo "Command execution failed."
            exit 1
          fi
          echo "Command execution completed successfully."
